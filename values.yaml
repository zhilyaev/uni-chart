# kubeVersion: 1.25.0
# nameOverride: "MY_CUSTOM_RELEASE_NAME"

# -- Notes after successful deploy
notes: "Successful deploy!"

# -- resources preset
resourcesPreset: "none"
# -- it overrides resourcesPreset
resources: {}

# -- Any objects
extra: {}
#  net-pol: |-
#    apiVersion: networking.k8s.io/v1
#    kind: NetworkPolicy
#    metadata:
#      name: {{ include "helpers.app.fullname" (dict "name" "nw-policy" "context" $) }}
#      namespace: {{ .Release.Namespace | quote }}
#    spec:
#      podSelector:
#        matchLabels:
#          role: db
#      policyTypes:
#      - Ingress
#      - Egress
#      ingress:
#      - from:
#        - ipBlock:
#            cidr: 172.17.0.0/16
#            except:
#            - 172.17.1.0/24
#        - namespaceSelector:
#            matchLabels:
#              project: myproject
#        - podSelector:
#            matchLabels:
#              role: frontend
#        ports:
#        - protocol: TCP
#          port: 6379
#      egress:
#      - to:
#        - ipBlock:
#            cidr: 10.0.0.0/24
#        ports:
#        - protocol: TCP
#          port: 5978

# -- extra annotations for all resources (for podSpecTemplate use podAnnotations instead)
annotations: {}
#  general-annotation: general-annotation-value

# -- extra labels for all resources (for podSpecTemplate use podLabels instead)
labels: {}
#  general-label: general-label-value




#   ██████  ██████  ███    ██ ███████ ██  ██████  ██    ██ ██████   █████  ████████ ██  ██████  ███    ██ ███████
#  ██      ██    ██ ████   ██ ██      ██ ██       ██    ██ ██   ██ ██   ██    ██    ██ ██    ██ ████   ██ ██
#  ██      ██    ██ ██ ██  ██ █████   ██ ██   ███ ██    ██ ██████  ███████    ██    ██ ██    ██ ██ ██  ██ ███████
#  ██      ██    ██ ██  ██ ██ ██      ██ ██    ██ ██    ██ ██   ██ ██   ██    ██    ██ ██    ██ ██  ██ ██      ██
#   ██████  ██████  ██   ████ ██      ██  ██████   ██████  ██   ██ ██   ██    ██    ██  ██████  ██   ████ ███████



# -- Environment variables for all workloads (recommended way)
envs: {}
#  --set "envs.FOO=bar,envs.TEST=true"
#  BAR: foo
#  TEST: true

# -- use string as file for environment variables
envsString: ""
# --set "envsString=$ENVS_STRING"
#envsString: |
#  BAR2: foo2

# -- environment variables as the secret
secretEnvs: {}
#  --set "secretEnvs.FOO=bar"
#  FOO: bar

# -- use string as file for secret environment variables
secretEnvsString: ""
# --set "secretEnvsString=$SECRET_ENVS_STRING"
#secretEnvsString: |
#  FOO: BAR


#  ██     ██  ██████  ██████  ██   ██ ██       ██████   █████  ██████  ███████
#  ██     ██ ██    ██ ██   ██ ██  ██  ██      ██    ██ ██   ██ ██   ██ ██
#  ██  █  ██ ██    ██ ██████  █████   ██      ██    ██ ███████ ██   ██ ███████
#  ██ ███ ██ ██    ██ ██   ██ ██  ██  ██      ██    ██ ██   ██ ██   ██      ██
#   ███ ███   ██████  ██   ██ ██   ██ ███████  ██████  ██   ██ ██████  ███████

# -- Extra pod labels
podLabels: {}
#  pod-label: some

# -- Extra pod annotations
podAnnotations: {}
#  checksum/my: '{{ include "helpers.checksum" (printf "%s%s" $.Values.my) }}'
#  pod-annotation: true

# -- Extra selectors labels
selectorLabels: {}
  #  label: special

# -- Default priorityClassName
priorityClassName: ""


# -- Default image for all workloads
image:
  # -- Default registry
  registry: docker.io
  # -- Default repository
  repository: nginx
  # -- Default tag
  tag: latest
  # -- Default pullPolicy
  pullPolicy: IfNotPresent
  # -- Default pullSecrets
  pullSecrets: []
  #- name: regcred


# -- Predefined Affinity block
affinityPreset:
  # -- disable presets by default
  enabled: false
  # -- Pod affinity preset
  # ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  # Allowed values: soft, hard, nil (nil means disabling)
  podAffinityType: soft
  # -- Pod anti-affinity preset
  # Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  # Allowed values: soft, hard, nil (nil means disabling)
  podAntiAffinityType: soft
  
  # -- Node affinity preset
  # Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  nodeAffinity:
    # -- Node affinity type
    # Allowed values: soft, hard, nil (nil means disabling)
    type: "soft"
    # -- Node label key to match
    # E.g.
    # key: "kubernetes.io/e2e-az-name"
    key: "topology.kubernetes.io/zone"
    # -- Node label values to match
    # E.g.
    # values:
    #   - e2e-az1
    #   - e2e-az2
    values: []
    #  - asia-southeast1-a
    #  - asia-southeast1-b
    #  - asia-southeast1-c

# -- It overrides affinityPreset
affinity: {}

# -- Default serviceAccount for all workloads
serviceAccountName: ""

# -- Change host aliases inside pods
hostAliases: []

# -- Change dns policy inside pods
dnsPolicy: []

# -- volumes for all workloads
volumes: []
#- name: cache
#  emptyDir: {}

# -- Clean yaml spec for volumes
extraVolumes: []

# -- Typed volume mounts
volumeMounts: []

# -- diagnosticMode works with all defined containers
diagnosticMode:
  enabled: false
  command: ["sleep"]
  args: ["infinity"]


#   ██████  ███████ ███    ██ ███████ ██████   █████  ██      ███████
#  ██       ██      ████   ██ ██      ██   ██ ██   ██ ██      ██
#  ██   ███ █████   ██ ██  ██ █████   ██████  ███████ ██      ███████
#  ██    ██ ██      ██  ██ ██ ██      ██   ██ ██   ██ ██           ██
#   ██████  ███████ ██   ████ ███████ ██   ██ ██   ██ ███████ ███████

# -- General for deployment
deploymentsGeneral:
  #  envSecrets: [envs]
  envConfigmaps: [ envs ]

# -- General for statefulSet
statefulSetsGeneral:
  #  envSecrets: [envs]
  envConfigmaps: [ envs ]

# -- General for daemonSet
daemonSetsGeneral:
  #  envSecrets: [envs]
  envConfigmaps: [ envs ]

# -- General for cron
cronJobsGeneral:
  #  envSecrets: [envs]
  envConfigmaps: [ envs ]

# -- General for jobs
jobsGeneral:
  #  envSecrets: [envs]
  envConfigmaps: [ envs ]
# -- General for helm-hook job
hooksGeneral:
  #  envSecrets: [envs]
  envConfigmaps: [ envs ]

# -- General for serviceAccountGeneral
serviceAccountGeneral: {}
# -- General for pdb
pdbsGeneral: {}
# -- General for pvc
pvcsGeneral: {}
# -- General for serviceMonitor
serviceMonitorsGeneral: {}
# -- General for podMonitors
podMonitorsGeneral: {}
# -- General for alert
alertsGeneral: {}
# -- General for networkPolicy
networkPoliciesGeneral: {}
# -- General for ingressesGeneral
ingressesGeneral: {}
# -- General for service
servicesGeneral: {}
# -- General for gateway
gatewaysGeneral: {}
# -- General for argocd app
argocdAppsGeneral: {}

#   ██████  ██████  ██      ██      ███████  ██████ ████████ ██  ██████  ███    ██ ███████
#  ██      ██    ██ ██      ██      ██      ██         ██    ██ ██    ██ ████   ██ ██
#  ██      ██    ██ ██      ██      █████   ██         ██    ██ ██    ██ ██ ██  ██ ███████
#  ██      ██    ██ ██      ██      ██      ██         ██    ██ ██    ██ ██  ██ ██      ██
#   ██████  ██████  ███████ ███████ ███████  ██████    ██    ██  ██████  ██   ████ ███████

# -- Collection of deployment
deployments: {}
#  nginx:
#    labels: {}
#    podLabels: {}
#    podAnnotations:
#      checksum/secret/token: '{{ include "helpers.checksum" $.Values.secrets.token }}'
#    replicas: 2
#    selectorLabels:
#      app: my-nginx
#    serviceAccountName: deployer
#    #affinity:
#    #  nodeAffinity:
#    #    requiredDuringSchedulingIgnoredDuringExecution:
#    #      nodeSelectorTerms:
#    #      - matchExpressions:
#    #        - key: node-role
#    #          operator: In
#    #          values:
#    #          - prod
#    containers:
#    - name: nginx
#      #image:
#        #repository: nginx
#        #tag: 1.19
#        #pullPolicy: Always
#      env:
#      - name: MY_ENV
#        value: "1234"
#      - name: QTE
#        value: safn8
#      envsFromSecret:
#        webadmin:
#        - JAVA_OPTS: JVM_OPTS
#        - QWE
#      envSecrets:
#      - secret-envs
#      envsFromConfigmap:
#        some-cm:
#        - LEL: LOL
#      envConfigmaps:
#      - envs
#      #ports:
#      #- name: http
#      #  containerPort: 8080
#      volumeMounts:
#      - name: secret-file
#        mountPath: /var/lib/secret
#      - name: app-pvc
#        mountPath: /var/www/html/files
#    volumes:
#    - name: secret-file
#      type: secret
#    - name: app-data
#      type: pvc

# -- Collection of statefulSets
statefulSets: {}
# -- Collection of  daemonSets
daemonSets: {}
# -- Collection of crons
cronJobs: {}
#  generate-data:
#    schedule: "*/5 * * * *"
#    command: "php yii crontab/generate-data"
#    singleOnly: true
#    commandDurationAlert: 600
#    commandMaxDuration: 800
#    volumeMounts:
#    - name: secret-file
#      mountPath: /etc/app
#      readOnly: true
#    volumes:
#    - name: secret-file
#      type: secret
#      items:
#      - key: app.conf
#        mode: 0600
#        path: app.conf
#  auto-sender:
#    schedule: "*/5 * * * *"
#    command: "php yii crontab/auto-sender"


# -- Collection of jobs
jobs: {}
#  refresh-cache:
#    command: "php yii crontab/refresh-cache"
#    commandDurationAlert: 30
#    commandMaxDuration: 60

# -- Collection of helm hooks jobs
hooks: {}
#  migration-up:
#    containers:
#    - image: registry.app.ru/app-migration
#      args:
#      - up
#      envFrom:
#      - secretRef:
#          name: server-env

# -- This Collection will create secrets
imagePullSecrets: {}
#  registry.org: |
#    {"auths":{"registry.org":{"auth":"<base64>"}}}
#  registry.org-rw: b64:$({"auths":{"registry.org":{"auth":"<base64>"}}} | base64)


# -- Collection of ConfigMaps
configMaps:
  # -- envs
  envs:
    enabled: true
  #some-cm:
  #  labels:
  #    kek: lol
  #  data:
  #    LOL: kek
  #json-file:
  # data:
  #   file.json: {
  #     "arg": "value"
  #   }

# -- Collection of Secrets
secrets: {}
  # # --set "secrets.secret-file.data.api\.key=$SOME_ENV"
  #secret-file:
  #  data:
  #    api.key: |-
  #      my-super-secret-value
  # # --set "secrets.test1.labels.blah=blah,secrets.test1.data.BAR=foo"
  # test1:
  #  labels:
  #    blah: blah
  #  data:
  #    BAR: foo
  # # --set-file "secrets.domain-tls.type=kubernetes.io\/tls,secrets.domain-tls.data.tls\.crt=path/to/tls.crt,secrets.domain-tls.data.tls\.key=path/to/tls.key"
  # nixys-tls:
  #  type: kubernetes.io/tls
  #  data:
  #    tls.crt: |-
  #      bla-bla-bla
  #    tls.key: |-
  #      bla-bla-bla
  # # --set "secrets.json-file.data.file\.json=$(printf %q $(cat file.json))"
  # # --set-file "secrets.json-file.data.file\.json=path/to/file.json"
  # json-file:
  #   data:
  #     file.json: {"arg": "value"}

# -- Collection of vaults envs can conflict with secrets collection
vaults: {}
#  envs:
#    store: my-secret-store
#    path: secret/hello/world
#    revision: 1

# -- Collection of AWS Secret Manager
awssm: {}

# -- Collection of AWS secrets
awsps: {}

# -- Collection of serviceAccounts
serviceAccount: {}
#  firstaccount:
#    role:
#      name: test-role
#      rules:
#      - apiGroups:
#        - ""
#        - apps
#        - extensions
#        resources:
#        - replicasets
#        - pods
#        - deployments
#        verbs:
#        - list
#        - watch
#        - create
#        - update
#        - get
#        - delete
#    clusterRole:
#      name: view
#  secondaccount: {}
#  thirdaccount:
#    clusterRole:
#      name: thirdaccountclusterrole
#      rules:
#      - apiGroups: ["stable.example.com"]
#        resources: ["crontabs"]
#        verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]


# -- Collection of pdb, can match with workloads with the same name
pdbs: {}
#  app:
#    minAvailable: 1

# -- Collection of priorityClasses
priorityClasses: {}

# -- All PVSs will be added to `volumes` block in each workload excluding hooks
pvcs: {}
#  app-data:
#    accessModes:
#    - ReadWriteOnce
#    - ReadWriteMany
#    size: 8Gi

# -- Collection of hpa, can match with workloads with the same name
hpas: {}

# -- Collection of vpa, can match with workloads with the same name
vpas: {}

# -- Collection of keda, can match with workloads with the same name
kedas: {}

# -- Collection of alert, It's prometheus rule.
alerts: {}

# -- Collection of serviceMonitor, It's prometheus service monitor.
serviceMonitors: {}
#  app-sm:
#    endpoints:
#    - interval: 30s
#      port: exporter
#      path: /metrics
#    selectorLabels:
#      app: nginx
#    labels:
#      foo: foo

# -- Collection of podMonitor, It's prometheus pod monitor.
podMonitors: {}

# -- Collection of networkPolicy, It's Firewall rules
networkPolicies: {}
#  allow-internal-ns-metrics:
#    ingress:
#      - from:
#          - namespaceSelector:
#              matchLabels:
#                name: metrics
#          - namespaceSelector:
#              matchLabels:
#                name: "{{ .Release.Namespace }}"

# -- Collection of service
services: {}
#  8080: {} # create 8080 ClusterIP
#  nginx:
#    clusterIP: None
#    ports:
#    - name: http
#      protocol: TCP
#      port: 8080
#    selectorLabels:
#      app: my-nginx

# -- Collection of ingress
ingresses: {}
#  nixys.ru:
#    annotations:
#      nginx.ingress.kubernetes.io/ssl-redirect: "true"
#      nginx.ingress.kubernetes.io/proxy-body-size: "128m"
#    certManager:
#      issuerType: cluster-issuer
#      issuerName: letsencrypt
#    hosts:
#    - paths:
#      - serviceName: nginx
#        servicePort: http
#  nixys.org:
#    annotations:
#      nginx.ingress.kubernetes.io/ssl-redirect: "true"
#    hosts:
#    - paths:
#      - path: /api
#        servicePort: api
#    - hostname: nixys.com
#      paths:
#      - path: /api
#        servicePort: api
#    tls:
#    - hosts:
#      - nixys.com
#      - nixys.org
#      secretName: "nixys-tls"

# -- Collection of gateway
gateways: {}

# -- Collection of resourceQuotas
resourceQuotas: {}

# -- Collection of  LimitRanges
limitRanges: {}

# -- Collection of ArgoCD application
argocdApps: {}
# -- Collection of ArgoCD application sets
argocdAppSets: {}

# -- Collection of Vault secret stores
vaultStores: {}
